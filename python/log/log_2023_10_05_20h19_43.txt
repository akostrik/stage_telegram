model           = gpt-3.5-turbo
temperature     = 0.0
max_len_message = 600
channels        = [-1001842901217, -1001905441409, -1001863996867, -1001944316671, -1001919265899]

calc_affirmations
prompt =             Please generate binary affirmations from the provided news message:

            'abc'

            For each affirmation:

            1. Extract key assertions from the message. 
            2. Convert negations into their positive counterparts.
            3. Each affirmation must be standalone and provide full context. If there's an attributed source in the message, ensure it's included in the affirmation.
            4. Provide a truth value for each affirmation based on its accuracy within the message.

            The result should be in this format:
            {
                'Binary affirmation 1': true/false,
                'Binary affirmation 2': true/false,
                ...
            }

            Ensure that each binary affirmation is concise, clear, and independent. They should almost function as a unique hash of the information they contain.

            
affirmation:
{
    'Binary affirmation 1': True,
    'Binary affirmation 2': False,
    'Binary affirmation 3': True
}
{}
{'0': '{', '1': '\n', '2': ' ', '3': ' ', '4': ' ', '5': ' ', '6': "'", '7': 'B', '8': 'i', '9': 'n', '10': 'a', '11': 'r', '12': 'y', '13': ' ', '14': 'a', '15': 'f', '16': 'f', '17': 'i', '18': 'r', '19': 'm', '20': 'a', '21': 't', '22': 'i', '23': 'o', '24': 'n', '25': ' ', '26': '1', '27': "'", '28': ':', '29': ' ', '30': 'T', '31': 'r', '32': 'u', '33': 'e', '34': ',', '35': '\n', '36': ' ', '37': ' ', '38': ' ', '39': ' ', '40': "'", '41': 'B', '42': 'i', '43': 'n', '44': 'a', '45': 'r', '46': 'y', '47': ' ', '48': 'a', '49': 'f', '50': 'f', '51': 'i', '52': 'r', '53': 'm', '54': 'a', '55': 't', '56': 'i', '57': 'o', '58': 'n', '59': ' ', '60': '2', '61': "'", '62': ':', '63': ' ', '64': 'F', '65': 'a', '66': 'l', '67': 's', '68': 'e', '69': ',', '70': '\n', '71': ' ', '72': ' ', '73': ' ', '74': ' ', '75': "'", '76': 'B', '77': 'i', '78': 'n', '79': 'a', '80': 'r', '81': 'y', '82': ' ', '83': 'a', '84': 'f', '85': 'f', '86': 'i', '87': 'r', '88': 'm', '89': 'a', '90': 't', '91': 'i', '92': 'o', '93': 'n', '94': ' ', '95': '3', '96': "'", '97': ':', '98': ' ', '99': 'T', '100': 'r', '101': 'u', '102': 'e', '103': '\n', '104': '}'}
affirmation:
{
    'Binary affirmation 1': True,
    'Binary affirmation 2': False,
    'Binary affirmation 3': True
}
Error in atexit._run_exitfuncs:
Traceback (most recent call last):
  File "/home/an/.local/lib/python3.8/site-packages/pymongo/periodic_executor.py", line 108, in join
    self._thread.join(timeout)
  File "/usr/lib/python3.8/threading.py", line 1015, in join
    self._wait_for_tstate_lock(timeout=max(timeout, 0))
  File "/usr/lib/python3.8/threading.py", line 1027, in _wait_for_tstate_lock
    elif lock.acquire(block, timeout):
KeyboardInterrupt
