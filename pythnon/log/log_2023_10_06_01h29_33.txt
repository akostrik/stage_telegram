Unhandled exception on new_message_handler
Traceback (most recent call last):
  File "/opt/homebrew/lib/python3.11/site-packages/telethon/client/updates.py", line 570, in _dispatch_update
    await callback(event)
  File "/Users/nicolas/TelegramBots/LastStage/src/main.py", line 92, in new_message_handler
    await group.new_message_handler(event, promptC, promptA, model, temperature, max_tokens, request_timeout, collection_messages)
  File "/Users/nicolas/TelegramBots/LastStage/src/class_group.py", line 21, in new_message_handler
    await message.calc_affirmations(prompt_a, model, temperature, max_tokens, request_timeout, collection_messages, self)
  File "/Users/nicolas/TelegramBots/LastStage/src/class_message.py", line 49, in calc_affirmations
    response = openai.ChatCompletion.create( # await ?
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/lib/python3.11/site-packages/openai/api_resources/chat_completion.py", line 25, in create
    return super().create(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/lib/python3.11/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
    response, _, api_key = requestor.request(
                           ^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/lib/python3.11/site-packages/openai/api_requestor.py", line 298, in request
    resp, got_stream = self._interpret_response(result, stream)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/lib/python3.11/site-packages/openai/api_requestor.py", line 700, in _interpret_response
    self._interpret_response_line(
  File "/opt/homebrew/lib/python3.11/site-packages/openai/api_requestor.py", line 765, in _interpret_response_line
    raise self.handle_error_response(
openai.error.RateLimitError: Rate limit reached for 10KTPM-200RPM in organization org-XF2UyMG0Qpw50VogHx2c4oFI on tokens per min. Limit: 10000 / min. Please try again in 6ms. Contact us through our help center at help.openai.com if you continue to have issues.
model           = gpt-4
temperature     = 0.2
max_len_message = 600
channels        = [-1001842901217, -1001905441409, -1001863996867, -1001944316671, -1001919265899]

**Более 700 камер в Москве будут определять, пристегнуты ли пассажиры в машинах

**Ездить на пассажирском сиденье непристегнутым ремнем безопасности запрещено. Теперь камеры будут фиксировать и это нарушение. Для собственника автомобиля штраф за зафиксированное нарушение составит 1000 рублей
            Please generate binary affirmations from the provided news message:

            '**Более 700 камер в Москве будут определять, пристегнуты ли пассажиры в машинах

**Ездить на пассажирском сиденье непристегнутым ремнем безопасности запрещено. Теперь камеры будут фиксировать и это нарушение. Для собственника автомобиля штраф за зафиксированное нарушение составит 1000 рублей'

            For each affirmation:

            1. Extract key assertions from the message. 
            2. Convert negations into their positive counterparts.
            3. Each affirmation must be standalone and provide full context. If there's an attributed source in the message, ensure it's included in the affirmation.
            4. Provide a truth value for each affirmation based on its accuracy within the message.

            The result should be in this format:
            {
                'Binary affirmation 1': true/false,
                'Binary affirmation 2': true/false,
                ...
            }

            Ensure that each binary affirmation is concise, clear, and independent. They should almost function as a unique hash of the information they contain.

            
{
  "id": "chatcmpl-86S5M98gPEr68MANdoS7IZmoZLMqZ",
  "object": "chat.completion",
  "created": 1696548620,
  "model": "gpt-4-0613",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "{\n    'More than 700 cameras in Moscow will determine whether passengers in cars are buckled up': true,\n    'Riding in the passenger seat without a seatbelt is prohibited': true,\n    'Cameras will now record this violation': true,\n    'The fine for the car owner for a recorded violation is 1000 rubles': true\n}"
      },
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 304,
    "completion_tokens": 74,
    "total_tokens": 378
  }
}
Put to mongo successful.
**В ЕС обеспокоены процессом принятия в Республике Сербской "закона об иноагентах" 

**В Брюсселе отмечают, что окончательное принятие этого закона "__прямо противоречит неоднократным обязательствам руководства Республики Сербской продвигать европейскую интеграцию Боснии и Герцеговины__", в частности ключевым приоритетам о гражданском обществе и о свободе выражения мнений и СМИ.
            Please generate binary affirmations from the provided news message:

            '**В ЕС обеспокоены процессом принятия в Республике Сербской "закона об иноагентах" 

**В Брюсселе отмечают, что окончательное принятие этого закона "__прямо противоречит неоднократным обязательствам руководства Республики Сербской продвигать европейскую интеграцию Боснии и Герцеговины__", в частности ключевым приоритетам о гражданском обществе и о свободе выражения мнений и СМИ.'

            For each affirmation:

            1. Extract key assertions from the message. 
            2. Convert negations into their positive counterparts.
            3. Each affirmation must be standalone and provide full context. If there's an attributed source in the message, ensure it's included in the affirmation.
            4. Provide a truth value for each affirmation based on its accuracy within the message.

            The result should be in this format:
            {
                'Binary affirmation 1': true/false,
                'Binary affirmation 2': true/false,
                ...
            }

            Ensure that each binary affirmation is concise, clear, and independent. They should almost function as a unique hash of the information they contain.

            
{
  "id": "chatcmpl-86S5Xdc4iypJVVl37uFI4FBxhqKiQ",
  "object": "chat.completion",
  "created": 1696548631,
  "model": "gpt-4-0613",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "{\n    'The EU is concerned about the adoption process of the \"foreign agent law\" in the Republic of Srpska': true,\n    'Brussels notes that the final adoption of this law directly contradicts the repeated obligations of the leadership of the Republic of Srpska to promote the European integration of Bosnia and Herzegovina': true,\n    'The \"foreign agent law\" in the Republic of Srpska contradicts key priorities about civil society and freedom of expression and media': true\n}"
      },
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 350,
    "completion_tokens": 102,
    "total_tokens": 452
  }
}
Put to mongo successful.
В Кремле пообещали, что выступление Путина на «Валдае» станет** событием мирового масштаба**
            Please generate binary affirmations from the provided news message:

            'В Кремле пообещали, что выступление Путина на «Валдае» станет** событием мирового масштаба**'

            For each affirmation:

            1. Extract key assertions from the message. 
            2. Convert negations into their positive counterparts.
            3. Each affirmation must be standalone and provide full context. If there's an attributed source in the message, ensure it's included in the affirmation.
            4. Provide a truth value for each affirmation based on its accuracy within the message.

            The result should be in this format:
            {
                'Binary affirmation 1': true/false,
                'Binary affirmation 2': true/false,
                ...
            }

            Ensure that each binary affirmation is concise, clear, and independent. They should almost function as a unique hash of the information they contain.

            
В Кремле пообещали, что выступление Путина на «Валдае» станет** событием мирового масштаба**
            Please generate binary affirmations from the provided news message:

            'В Кремле пообещали, что выступление Путина на «Валдае» станет** событием мирового масштаба**'

            For each affirmation:

            1. Extract key assertions from the message. 
            2. Convert negations into their positive counterparts.
            3. Each affirmation must be standalone and provide full context. If there's an attributed source in the message, ensure it's included in the affirmation.
            4. Provide a truth value for each affirmation based on its accuracy within the message.

            The result should be in this format:
            {
                'Binary affirmation 1': true/false,
                'Binary affirmation 2': true/false,
                ...
            }

            Ensure that each binary affirmation is concise, clear, and independent. They should almost function as a unique hash of the information they contain.

            
{
  "id": "chatcmpl-86S7vrnM4gWoVw1bCnrJbmnTGCTmJ",
  "object": "chat.completion",
  "created": 1696548779,
  "model": "gpt-4-0613",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "{\n    'The Kremlin has promised something regarding Putin\\'s performance at \"Valdai\"': true,\n    'Putin\\'s performance at \"Valdai\" is expected to be a global-scale event according to the Kremlin': true\n}"
      },
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 209,
    "completion_tokens": 50,
    "total_tokens": 259
  }
}
Put to mongo successful.
