openai model for propaganda marks = gpt-4
openai model for affirmations     = gpt-3.5-turbo
temperature                       = 0.2
max_len_telegram_message          = 600
verification of the messages for the last 0.016 hours

0  positive author attitude
1  the message is advantageous for the actual political power
2  exaggerations
3  lack of object concordance
4  appeal to the intellect
5  appeal to emotions
6  appeal to virtues
7  appeal to ethics
8  appeal to blinding generalities as fatherland, peace, glory, justice, honor
9  appeal to fear
10 appeal to the threat from other countries
11 appeal to hatred
12 appeal to authority
13 appeal to human rights
14 criticism of the actual political power
15 generalizations
16 seemingly scientific appearance, but only seemingly
17 real scientific proofs of the information
18 real proofs of the information
19 euphemismes replacing offensive expressions
20 euphemismes replacing war or victims
21 formal register of the texte
22 beneficiaries of the information regarding to politics
23 flattery to the reader
24 dilemma between only two possibilities
25 criticisme of a person instead of criticism of his arguments
26 underestimation of the proofs of the opponents

-1002078508192
set()
server1 listens to the channels {-1002078508192, -1002142650141, -1002033244827, -1002061517552, -1002074952363}
server1 has received the message :string = (
    "Please generate binary affirmations from the provided news message:\n\n"
    f"\"{message.text}\"\n\n"  # Use double quotes around the message text
    "For each affirmation:\n\n"
    "1. Extract key assertions from the message.\n"
    "2. Convert negations into their positive counterparts.\n"
    "3. Each affirmation must be standalone and provide full context. If there's an attributed source in the message, ensure it's included in the affirmation.\n"
    "4. Provide a truth value for each affirmation based on its accuracy within the message.\n\n"
    "The result should be in this format:\n"
    "{\n"
    "    \"Binary affirmation 1\": true/false,\n"  # Use double quotes for keys
    "    \"Binary affirmation 2\": true/false,\n"  # and values in the dictionary
    "    ...\n"
    "}\n\n"
    "Ensure that each binary affirmation is concise, clear, and independent. They should almost function as a unique hash of the information they contain. And always in English no matter what language of the news\n"
)

OpenAI response: ['1. 0', '2. 0', '3. 0', '4. 0', '5. 0', '6. 0', '7. 0', '8. 0', '9. 0', '10. 0', '11. 0', '12. 0', '13. 0', '14. 0', '15. 0', '16. 0', '17. 0', '18. 0', '19. 0', '20. 0', '21. 0', '22. 0', '23. 0', '24. 0', '25. 0', '26. 0']

Task exception was never retrieved
future: <Task finished name='Task-16' coro=<UpdateMethods._dispatch_update() done, defined at /Users/jeanpaul/Library/Python/3.9/lib/python/site-packages/telethon/client/updates.py:521> exception=KeyboardInterrupt()>
Traceback (most recent call last):
  File "/Users/jeanpaul/Library/Python/3.9/lib/python/site-packages/telethon/client/updates.py", line 96, in run_until_disconnected
    return self.loop.run_until_complete(self._run_until_disconnected())
  File "/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 629, in run_until_complete
    self.run_forever()
  File "/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 596, in run_forever
    self._run_once()
  File "/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 1890, in _run_once
    handle._run()
  File "/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/events.py", line 80, in _run
    self._context.run(self._callback, *self._args)
  File "/Users/jeanpaul/Library/Python/3.9/lib/python/site-packages/telethon/client/updates.py", line 570, in _dispatch_update
    await callback(event)
  File "/Users/jeanpaul/Projects/stage_telegram/server1/server1.py", line 96, in new_message_handler
    await group_channels.new_message_handler(event, prompt_c, prompt_a, model_c, model_a,temperature, max_tokens, how_many_hours_verification, collection_messages, collection_channels, collection_channels_score, collection_channels_simiarity)
  File "/Users/jeanpaul/Projects/stage_telegram/server1/class_group.py", line 22, in new_message_handler
    await message.calc_affirmations(prompt_a, model_a, temperature, max_tokens, collection_messages, self)
  File "/Users/jeanpaul/Projects/stage_telegram/server1/class_message.py", line 45, in calc_affirmations
    response = openai.ChatCompletion.create( # await ?
  File "/Users/jeanpaul/Library/Python/3.9/lib/python/site-packages/openai/api_resources/chat_completion.py", line 25, in create
    return super().create(*args, **kwargs)
  File "/Users/jeanpaul/Library/Python/3.9/lib/python/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
    response, _, api_key = requestor.request(
  File "/Users/jeanpaul/Library/Python/3.9/lib/python/site-packages/openai/api_requestor.py", line 288, in request
    result = self.request_raw(
  File "/Users/jeanpaul/Library/Python/3.9/lib/python/site-packages/openai/api_requestor.py", line 596, in request_raw
    result = _thread_context.session.request(
  File "/Users/jeanpaul/Library/Python/3.9/lib/python/site-packages/requests/sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
  File "/Users/jeanpaul/Library/Python/3.9/lib/python/site-packages/requests/sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
  File "/Users/jeanpaul/Library/Python/3.9/lib/python/site-packages/requests/adapters.py", line 486, in send
    resp = conn.urlopen(
  File "/Users/jeanpaul/Library/Python/3.9/lib/python/site-packages/urllib3/connectionpool.py", line 790, in urlopen
    response = self._make_request(
  File "/Users/jeanpaul/Library/Python/3.9/lib/python/site-packages/urllib3/connectionpool.py", line 536, in _make_request
    response = conn.getresponse()
  File "/Users/jeanpaul/Library/Python/3.9/lib/python/site-packages/urllib3/connection.py", line 461, in getresponse
    httplib_response = super().getresponse()
  File "/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/http/client.py", line 1349, in getresponse
    response.begin()
  File "/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/http/client.py", line 316, in begin
    version, status, reason = self._read_status()
  File "/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/http/client.py", line 277, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/socket.py", line 704, in readinto
    return self._sock.recv_into(b)
  File "/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/ssl.py", line 1241, in recv_into
    return self.read(nbytes, buffer)
  File "/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/ssl.py", line 1099, in read
    return self._sslobj.read(len, buffer)
KeyboardInterrupt
