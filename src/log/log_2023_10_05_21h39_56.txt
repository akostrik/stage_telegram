Unhandled exception on new_message_handler
Traceback (most recent call last):
  File "/opt/homebrew/lib/python3.11/site-packages/telethon/client/updates.py", line 570, in _dispatch_update
    await callback(event)
  File "/Users/nicolas/TelegramBots/LastStage/src/main.py", line 92, in new_message_handler
    await group.new_message_handler(event, promptC, promptA, model, temperature, max_tokens, request_timeout, collection_messages)
  File "/Users/nicolas/TelegramBots/LastStage/src/class_group.py", line 22, in new_message_handler
    await message.put_to_mongo(prompt_c, prompt_a, collection_messages)
  File "/Users/nicolas/TelegramBots/LastStage/src/class_message.py", line 58, in put_to_mongo
    print(await collection_messages)
          ^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: object Collection can't be used in 'await' expression
model           = gpt-3.5-turbo
temperature     = 0.0
max_len_message = 600
channels        = [-1001842901217, -1001905441409, -1001863996867, -1001944316671, -1001919265899]

prompt =             Please generate binary affirmations from the provided news message:

            'abc'

            For each affirmation:

            1. Extract key assertions from the message. 
            2. Convert negations into their positive counterparts.
            3. Each affirmation must be standalone and provide full context. If there's an attributed source in the message, ensure it's included in the affirmation.
            4. Provide a truth value for each affirmation based on its accuracy within the message.

            The result should be in this format:
            {
                'Binary affirmation 1': true/false,
                'Binary affirmation 2': true/false,
                ...
            }

            Ensure that each binary affirmation is concise, clear, and independent. They should almost function as a unique hash of the information they contain.

            
